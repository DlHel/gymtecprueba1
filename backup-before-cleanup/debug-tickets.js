/**
 * DEBUG ESPEC√çFICO PARA TICKETS - Gymtec ERP
 * Script para depurar problemas de autenticaci√≥n en tickets.html
 */

console.log('üîç DEBUG TICKETS: Script cargado');

// Funci√≥n para verificar el estado de autenticaci√≥n paso a paso
function debugAuthState() {
    console.log('üîç DEBUG TICKETS: Verificando estado de autenticaci√≥n...');
    
    // 1. Verificar si AuthManager existe
    if (!window.AuthManager) {
        console.error('‚ùå DEBUG TICKETS: AuthManager no est√° disponible');
        return false;
    }
    console.log('‚úÖ DEBUG TICKETS: AuthManager est√° disponible');
    
    // 2. Verificar token en localStorage
    const token = localStorage.getItem('gymtec_token');
    if (!token) {
        console.error('‚ùå DEBUG TICKETS: No hay token en localStorage');
        return false;
    }
    console.log('‚úÖ DEBUG TICKETS: Token encontrado:', token.substring(0, 20) + '...');
    
    // 3. Verificar datos de usuario
    const userData = localStorage.getItem('gymtec_user');
    if (!userData) {
        console.warn('‚ö†Ô∏è DEBUG TICKETS: No hay datos de usuario');
    } else {
        try {
            const user = JSON.parse(userData);
            console.log('‚úÖ DEBUG TICKETS: Usuario encontrado:', user.username, 'Rol:', user.role);
        } catch (e) {
            console.error('‚ùå DEBUG TICKETS: Error parsing datos de usuario:', e);
        }
    }
    
    // 4. Verificar isAuthenticated()
    const isAuth = AuthManager.isAuthenticated();
    console.log('üîê DEBUG TICKETS: isAuthenticated():', isAuth);
    
    // 5. Verificar API_URL
    console.log('üåê DEBUG TICKETS: API_URL:', window.API_URL);
    
    return isAuth;
}

// Funci√≥n para probar el endpoint de verificaci√≥n
async function testAuthEndpoint() {
    console.log('üîç DEBUG TICKETS: Probando endpoint de verificaci√≥n...');
    
    try {
        const response = await fetch(`${window.API_URL}/auth/verify`, {
            headers: AuthManager.getAuthHeaders()
        });
        
        console.log('üì° DEBUG TICKETS: Respuesta del servidor:', response.status, response.statusText);
        
        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ DEBUG TICKETS: Token v√°lido, datos:', data);
            return true;
        } else {
            console.error('‚ùå DEBUG TICKETS: Token inv√°lido o expirado');
            return false;
        }
    } catch (error) {
        console.error('‚ùå DEBUG TICKETS: Error de conexi√≥n:', error);
        return false;
    }
}

// Interceptar redirecciones para debug
const originalAssign = window.location.assign;
const originalReplace = window.location.replace;

Object.defineProperty(window.location, 'href', {
    set: function(url) {
        console.log('üö® DEBUG TICKETS: Redirecci√≥n interceptada:', url);
        console.log('üö® DEBUG TICKETS: Desde p√°gina:', window.location.pathname);
        console.trace('üö® DEBUG TICKETS: Stack trace de redirecci√≥n');
        
        // Si es una redirecci√≥n a login desde tickets, hacer debug completo
        if (url.includes('login.html') && window.location.pathname.includes('tickets.html')) {
            console.log('üö® DEBUG TICKETS: REDIRECCI√ìN TICKETS -> LOGIN DETECTADA');
            debugAuthState();
        }
        
        // Continuar con la redirecci√≥n original
        window.location.assign(url);
    },
    get: function() {
        return document.location.href;
    }
});

// Ejecutar debug cuando la p√°gina se carga
document.addEventListener('DOMContentLoaded', () => {
    console.log('üîç DEBUG TICKETS: P√°gina cargada, ejecutando debug...');
    
    setTimeout(() => {
        const authOk = debugAuthState();
        
        if (authOk) {
            console.log('‚úÖ DEBUG TICKETS: Autenticaci√≥n OK, probando endpoint...');
            testAuthEndpoint().then(endpointOk => {
                if (endpointOk) {
                    console.log('‚úÖ DEBUG TICKETS: Todo OK, no deber√≠a haber redirecci√≥n');
                } else {
                    console.log('‚ùå DEBUG TICKETS: Endpoint fall√≥, redirecci√≥n justificada');
                }
            });
        } else {
            console.log('‚ùå DEBUG TICKETS: Autenticaci√≥n fall√≥, redirecci√≥n esperada');
        }
    }, 500);
});

// Funci√≥n global para debug manual
window.debugTicketsAuth = debugAuthState;
window.testTicketsAuth = testAuthEndpoint;

console.log('üîç DEBUG TICKETS: Funciones globales disponibles: debugTicketsAuth(), testTicketsAuth()');
