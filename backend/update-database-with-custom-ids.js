const mysql = require('mysql2');
require('dotenv').config({ path: './config.env' });

// Configuraci√≥n de conexi√≥n
const connection = mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'gymtec_erp'
});

// Funci√≥n para ejecutar queries con promesas
function query(sql, params = []) {
    return new Promise((resolve, reject) => {
        connection.query(sql, params, (err, results) => {
            if (err) reject(err);
            else resolve(results);
        });
    });
}

async function updateDatabaseWithCustomIds() {
    try {
        console.log('üîÑ ACTUALIZANDO BASE DE DATOS CON CUSTOM_IDS');
        console.log('='.repeat(60));
        
        console.log('üì° Conectando a MySQL...');
        await query('SELECT 1');
        console.log('‚úÖ Conectado exitosamente\n');

        // 1. OBTENER DATOS ACTUALES
        console.log('üìä OBTENIENDO DATOS ACTUALES...');
        const clients = await query('SELECT id, name, custom_id FROM clients ORDER BY custom_id');
        const locations = await query('SELECT id, name, custom_id, client_id FROM locations ORDER BY custom_id');
        const equipment = await query('SELECT id, custom_id, model_id, location_id FROM equipment ORDER BY custom_id LIMIT 20');
        
        console.log(`   ‚Ä¢ ${clients.length} clientes`);
        console.log(`   ‚Ä¢ ${locations.length} ubicaciones`);
        console.log(`   ‚Ä¢ ${equipment.length} equipos (muestra)`);

        // 2. CREAR TICKETS ADICIONALES CON REFERENCIAS A CUSTOM_IDS
        console.log('\nüé´ CREANDO TICKETS ADICIONALES...');
        
        // Eliminar tickets existentes para empezar limpio
        await query('DELETE FROM tickets WHERE id >= 16');
        
        const ticketTemplates = [
            {
                title: 'Mantenimiento Preventivo Mensual',
                description: 'Revisi√≥n general del equipo seg√∫n protocolo de mantenimiento',
                status: 'Abierto',
                priority: 'Media',
                category: 'Mantenimiento'
            },
            {
                title: 'Reparaci√≥n de Motor',
                description: 'Motor presenta ruidos an√≥malos y vibraci√≥n excesiva',
                status: 'En Progreso',
                priority: 'Alta',
                category: 'Reparaci√≥n'
            },
            {
                title: 'Calibraci√≥n de Sensores',
                description: 'Sensores de velocidad y distancia descalibrados',
                status: 'En Espera',
                priority: 'Media',
                category: 'Calibraci√≥n'
            },
            {
                title: 'Limpieza Profunda',
                description: 'Limpieza completa y desinfecci√≥n del equipo',
                status: 'Resuelto',
                priority: 'Baja',
                category: 'Limpieza'
            },
            {
                title: 'Reemplazo de Correa',
                description: 'Correa de transmisi√≥n presenta desgaste excesivo',
                status: 'Abierto',
                priority: 'Alta',
                category: 'Repuesto'
            },
            {
                title: 'Ajuste de Frenos',
                description: 'Sistema de frenos requiere ajuste de tensi√≥n',
                status: 'En Progreso',
                priority: 'Alta',
                category: 'Ajuste'
            },
            {
                title: 'Actualizaci√≥n de Software',
                description: 'Actualizar firmware a la √∫ltima versi√≥n disponible',
                status: 'Cerrado',
                priority: 'Media',
                category: 'Software'
            },
            {
                title: 'Inspecci√≥n de Seguridad',
                description: 'Inspecci√≥n completa de sistemas de seguridad',
                status: 'Resuelto',
                priority: 'Alta',
                category: 'Seguridad'
            },
            {
                title: 'Lubricaci√≥n de Rodamientos',
                description: 'Aplicar lubricante a rodamientos y componentes m√≥viles',
                status: 'Cerrado',
                priority: 'Baja',
                category: 'Mantenimiento'
            },
            {
                title: 'Reparaci√≥n de Pantalla',
                description: 'Pantalla LCD presenta pixeles muertos',
                status: 'En Espera',
                priority: 'Media',
                category: 'Reparaci√≥n'
            }
        ];

        let ticketId = 16;
        let createdTickets = 0;

        // Crear tickets para diferentes equipos y clientes
        for (let i = 0; i < equipment.length && i < 30; i++) {
            const equipmentItem = equipment[i];
            const location = locations.find(l => l.id === equipmentItem.location_id);
            const client = clients.find(c => c.id === location.client_id);
            
            const template = ticketTemplates[i % ticketTemplates.length];
            
            // Obtener nombre del modelo
            const modelResult = await query('SELECT name FROM equipmentmodels WHERE id = ?', [equipmentItem.model_id]);
            const modelName = modelResult[0]?.name || 'Equipo';
            
            const ticketData = {
                title: `${template.title} - ${modelName}`,
                description: `${template.description}\n\nEquipo: ${equipmentItem.custom_id}\nUbicaci√≥n: ${location.name}\nCliente: ${client.name}\nCategor√≠a: ${template.category}`,
                status: template.status,
                priority: template.priority,
                client_id: client.id,
                location_id: location.id,
                equipment_id: equipmentItem.id,
                created_at: new Date(),
                updated_at: new Date()
            };

            await query(`
                INSERT INTO tickets (
                    title, description, status, priority,
                    client_id, location_id, equipment_id,
                    created_at, updated_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            `, [
                ticketData.title,
                ticketData.description,
                ticketData.status,
                ticketData.priority,
                ticketData.client_id,
                ticketData.location_id,
                ticketData.equipment_id,
                ticketData.created_at,
                ticketData.updated_at
            ]);

            console.log(`   ‚úÖ Ticket #${ticketId}: ${ticketData.title}`);
            ticketId++;
            createdTickets++;
        }

        // 3. CREAR NOTAS DE EQUIPOS
        console.log('\nüìù CREANDO NOTAS DE EQUIPOS...');
        
        const noteTemplates = [
            'Equipo funcionando correctamente despu√©s del √∫ltimo mantenimiento',
            'Se recomienda revisar el sistema de lubricaci√≥n en 30 d√≠as',
            'Usuario report√≥ ruido leve durante el uso',
            'Calibraci√≥n realizada exitosamente',
            'Pendiente reemplazo de filtro de aire',
            'Equipo presenta desgaste normal para su antig√ºedad',
            'Se aplic√≥ actualizaci√≥n de firmware',
            'Limpieza profunda completada',
            'Tensi√≥n de correa ajustada seg√∫n especificaciones',
            'Sistema de seguridad verificado y funcionando'
        ];

        let createdNotes = 0;
        for (let i = 0; i < Math.min(equipment.length, 15); i++) {
            const equipmentItem = equipment[i];
            const note = noteTemplates[i % noteTemplates.length];
            
            await query(`
                INSERT INTO equipmentnotes (
                    equipment_id, note, created_at
                ) VALUES (?, ?, ?)
            `, [
                equipmentItem.id,
                note,
                new Date()
            ]);
            
            createdNotes++;
        }
        
        console.log(`   ‚úÖ ${createdNotes} notas de equipos creadas`);

        // 4. VERIFICAR RESULTADOS FINALES
        console.log('\nüìä VERIFICANDO RESULTADOS FINALES...');
        
        const finalStats = {
            clients: await query('SELECT COUNT(*) as count FROM clients'),
            locations: await query('SELECT COUNT(*) as count FROM locations'),
            equipment: await query('SELECT COUNT(*) as count FROM equipment'),
            tickets: await query('SELECT COUNT(*) as count FROM tickets'),
            notes: await query('SELECT COUNT(*) as count FROM equipmentnotes'),
            models: await query('SELECT COUNT(*) as count FROM equipmentmodels')
        };

        console.log('üìã ESTAD√çSTICAS FINALES:');
        console.log(`   üë• Clientes: ${finalStats.clients[0].count}`);
        console.log(`   üè¢ Ubicaciones: ${finalStats.locations[0].count}`);
        console.log(`   üèãÔ∏è Equipos: ${finalStats.equipment[0].count}`);
        console.log(`   üé´ Tickets: ${finalStats.tickets[0].count}`);
        console.log(`   üìù Notas: ${finalStats.notes[0].count}`);
        console.log(`   üè≠ Modelos: ${finalStats.models[0].count}`);

        // 5. MOSTRAR ALGUNOS TICKETS CON CUSTOM_IDS
        console.log('\nüé´ TICKETS CON CUSTOM_IDS (Muestra):');
        const sampleTickets = await query(`
            SELECT t.id, t.title, t.status, t.priority,
                   c.custom_id as client_custom_id, c.name as client_name,
                   l.custom_id as location_custom_id, l.name as location_name,
                   e.custom_id as equipment_custom_id
            FROM tickets t
            LEFT JOIN clients c ON t.client_id = c.id
            LEFT JOIN locations l ON t.location_id = l.id
            LEFT JOIN equipment e ON t.equipment_id = e.id
            ORDER BY t.id DESC
            LIMIT 5
        `);

        sampleTickets.forEach(ticket => {
            console.log(`   ‚Ä¢ #${ticket.id} - ${ticket.title}`);
            console.log(`     Cliente: ${ticket.client_custom_id} | Ubicaci√≥n: ${ticket.location_custom_id} | Equipo: ${ticket.equipment_custom_id}`);
            console.log(`     Estado: ${ticket.status} | Prioridad: ${ticket.priority}`);
            console.log('');
        });

        console.log('='.repeat(60));
        console.log('üéâ BASE DE DATOS ACTUALIZADA EXITOSAMENTE');
        console.log('='.repeat(60));
        console.log('‚úÖ Custom IDs implementados y funcionando');
        console.log('‚úÖ Datos de prueba poblados');
        console.log('‚úÖ Relaciones verificadas');
        console.log('‚úÖ Sistema listo para pruebas completas');
        
        console.log('\nüöÄ PR√ìXIMOS PASOS:');
        console.log('   1. Abrir http://localhost:8080/test-custom-ids.html');
        console.log('   2. Ejecutar pruebas completas desde el frontend');
        console.log('   3. Verificar funcionalidad en clientes.html');
        console.log('   4. Probar creaci√≥n de nuevos registros');

    } catch (error) {
        console.error('‚ùå Error durante la actualizaci√≥n:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        connection.end();
        console.log('\nüîê Conexi√≥n con MySQL cerrada.');
    }
}

// Ejecutar actualizaci√≥n
updateDatabaseWithCustomIds(); 